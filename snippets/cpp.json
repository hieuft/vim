{
  "cp template": {
    "prefix": ["base"],
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main() {",
      "  ios::sync_with_stdio(false); cin.tie(nullptr);",
      "  ${1}",
      "  return 0;",
      "}",
      ""
    ],
    "description": "cp template"
  },
  "file oppen": {
    "prefix": "file",
    "body": [
      "#define taskname \"${1}\"",
      "  if (fopen (taskname\".inp\", \"r\")) {",
      "    freopen (taskname\".inp\", \"r\", stdin);",
      "    freopen (taskname\".out\", \"w\", stdout);",
      "  }"
    ],
    "description": "file oppen"
  },
  "codeforces template": {
    "prefix": "codeforces",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "void solve() {",
      "  ${1}",
      "}",
      "",
      "int main() {",
      "  ios::sync_with_stdio(false); cin.tie(nullptr);",
      "  int T; cin >> T;",
      "  while (T--) solve();",
      "  return 0;",
      "}",
      "",
      ""
    ],
    "description": "codeforces template"
  },
  "cp checker": {
    "prefix": "checker",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "const string NAME = \"${1}\";",
      "const int NTEST = 100;",
      "",
      "mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());",
      "#define rand rd",
      "",
      "long long mod(long long a, long long b) {",
      "  return (a % b + b) % b;",
      "}",
      "",
      "long long Rand(long long l, long long r) {",
      "  return l + mod(rd() * rd(), r - l + 1);",
      "}",
      "",
      "int main() {",
      "  srand(time(NULL));",
      "  for (int itest = 1; itest <= NTEST; ++itest) {",
      "    ofstream inp((NAME + \".inp\").c_str());",
      "    ${2}",
      "    inp.close();",
      "    system((NAME + \".exe\").c_str());",
      "    system((NAME + \"_trau.exe\").c_str());",
      "    if (system((\"fc \" + NAME + \".out \" + NAME + \".ans\").c_str()) != 0) {",
      "      cout << \"Test: \" << itest << \": WRONG\\n\";",
      "      return 0;",
      "    }",
      "    cout << \"Test: \" << itest << \": CORRECT\\n\";",
      "  }",
      "}",
      "",
      ""
    ],
    "description": "cp checker"
  }
}
